
uptrend="20210715-20211118"
downtrend="20211118-20220515"
mm2021="20210515-20220515"
mm2020="20200515-20210701"

t2019="20190101-20191231" #till 2019
t2020="20190101-20201231" #till 2020
t2021="20190101-20211231" #till 2021

all_time="20190101-"

__volume='./user_data'
__env=".env"

backtest()
{
	#name is used to set the directory name 
	#the test name is  strategy+current timestamp 
	#it is ok to have more tests under the same name because one name represent some settings
	__activate_python_env
	#check values
	[ -z "$__timeframe" ] && echo "missing --timeframe" && exit;
	[ -z "$__timerange" ] && echo "missing timerange" && exit;
	[ -z "$__suffix" ] && echo "missing --suffix" && exit;

	__name="$__suffix""_""$__timeframe""_""$__version"

	#if not strategy is defined we enable all strategy
	#we define __allstrategy for functions that define one strategy but still want to test all of them (like new_version)
	[ -z "$__strategy" ] && __allstrategy=true;

	echo $__warning_timeframe_detail

	__reports_args=;
	if [ -n "$__official" ]; then 
		__reports_args="--official"; 
	fi

	#preparing folder in backtest_results 
	__dir="$__volume"/"backtest_results"/"$__name"
	mkdir -p $__dir

	#run comand (either run_all_strategies or just one if one is selected)
	if [ -n "$__allstrategy" ] 
	then
		__backtest_all_strategies
	else
		__backtest $__strategy
	fi

	report $__reports_args
}

#official backtest
obacktest()
{ 
	#name: $suffix_timerange_timeframe_version, the name of the strategy it's already in the folder. 
	#the change of version corresponds to the change of any possible settings (form pairs used to different loss in optimization or epochs)
	#version increase only if we have at least one strategy with better results 
	#version change is reported in readme

	[ -z "$__version" ] && echo "missing --version" && exit;
	[ -z "$__suffix" ] && echo "missing --suffix" && exit;
	[ -z "$__timeframe" ] && echo "missing --timeframe" && exit;

	__activate_python_env

	#list of tests name 
	local __tests=( "mm2021:$mm2021" "all_time:$all_time" )

	echo "WARNING: this is an official backtest, it will run with timeframe_details=5m over several timeranges"
	sleep 5

	echo "starting..."

	__official=true;
	local suffix="$__suffix"
	for ob_test in "${__tests[@]}" ; do
		local testname="${ob_test%%:*}"  #key
		local timerange="${ob_test##*:}" #value
		__timeframe_detail='5m'
		__timerange=$timerange
		__suffix="$suffix""_""$testname"
		__allstrategy=true;
		backtest
	done
}

opt()
{
	__activate_python_env

	[ -z "$__strategy" ] && echo "missing --strategy" && exit;
	[ -z "$__timeframe" ] && echo "missing --timeframe" && exit;
	[ -z "$__timerange" ] && echo "missing timerange" && exit;
	[ -z "$__timeframe_detail" ] && echo "missing --timeframe-detail" && exit;
	[ -z "$__epochs" ] && echo "missing --hyperopt-loss" && exit;
	[ -z "$__loss" ] && echo "missing --epochs" && exit;

	local __freqtrade__cmd="freqtrade hyperopt --config $__config --epochs $__epochs --hyperopt-loss $__loss --timerange $__timerange --strategy $__strategy --timeframe $__timeframe --userdir $__volume  $__args";
	$__cmd_prefix $__freqtrade__cmd	
}

new_version()
{
	__activate_python_env
	[ -z "$__version" ] && echo "missing --version" && exit;
	[ -z "$__epochs" ] && echo "missing --hyperopt-loss" && exit;
	[ -z "$__loss" ] && echo "missing --epochs" && exit;

	local __tests=( "t2019":$t2019 "t2020":$t2020 "t2021":$t2021 "tnow":$all_time )
	local __timeframes=( "4h" "12h" )

	#1) opt for all strategies and timeframe 4h 
	#2) run obacktest (official backtest) for 3 timeframes ( 4h, 12h) and some timeranges (t2019, t2020, t2021, all_time) 
	#3) copy strategy.json into opt folder and rename it 

	for nv_test in "${__tests[@]}" ; do
		for nv_timeframe in "${__timeframes[@]}" ; do

			local testname="${nv_test%%:*}"  #key
			local timerange="${nv_test##*:}" #value

			__timerange=$timerange
			__timeframe_detail='5m'
			__timeframe=$nv_timeframe

			#run 1 test per strategy
			for nv_file in user_data/strategies/*.py; do
				if [ -f "$nv_file" ]
				then
					local strategy=${nv_file%.py}
					local strategy=${strategy##*/}

					__strategy=$strategy
					echo "Optimizing $strategy"
					opt
				fi
			done

			#run official backtest for all timeframes and timeranges
			__suffix=$testname
			obacktest

			#copy strategy.json into opt folder and rename it to strategy_$version.json
			mkdir -p "user_data/versions/"
			local file 
			for file in user_data/strategies/*.py; do
				if [ -f "$file" ]
				then
					local strategy=${file%.py}
					local strategy=${strategy##*/}
					$__cmd_prefix cp "user_data/strategies/$strategy.json" "user_data/versions/$strategy""_""$testname""_""$nv_timeframe""_""$__version.json"
				fi
			done
		done
	done

}

report()
{
	__activate_python_env

	$__cmd_prefix python "pyscripts/csv_report.py" $@
}

bulkdownload()
{
	__activate_python_env
	__timerange=$all_time
	echo "Start downloading ..."
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 5m ${__args[@]} ;
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 1h ${__args[@]} ;
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 4h ${__args[@]} ;
	$__cmd_prefix freqtrade download-data --exchange "binance"  --pairs-file $__volume/data/binance/pairs.json  --timerange $__timerange -t 12h ${__args[@]} ;
}


help(){
    echo
    echo -e "\033[1;4;32m""Functions:""\033[0;34m"
    compgen -A function
    echo
    echo -e "\033[1;4;32m""Aliases:""\033[0;34m"
    compgen -A alias
    echo
    echo -e "\033[0m"
}

setup()
{
	
	rm -rf $__env
	$__cmd_prefix python -m venv $__env

	__activate_python_env

	$__cmd_prefix python -m pip install --upgrade pip

	#installing ta-lib
	sudo $__cmd_prefix ./build_helpers/install_ta-lib.sh

	#installing freqtrade
	$__cmd_prefix git clone https://github.com/freqtrade/freqtrade.git
	$__cmd_prefix cd freqtrade
	$__cmd_prefix git checkout stable 

	$__cmd_prefix pip install -r requirements.txt
	$__cmd_prefix pip install -r requirements-hyperopt.txt
	$__cmd_prefix pip install -r requirements-plot.txt
	$__cmd_prefix python -m pip install -e .
	$__cmd_prefix cd - 
	$__cmd prefix pip install -r ./requirements.txt
	#$__cmd_prefix rm -rf freqtrade
}

update()
{
	$__cmd_prefix cd freqtrade
	$__cmd_prefix git checkout stable 
	$__cmd_prefix git pull
	$__cmd_prefix cd - 
}

version()
{
	__activate_python_env
	$__cmd_prefix freqtrade --version
}

#############################  PRIVATE #########################################
__set()
{
	#first argument it s one command , followings are arguments
	if [ -z "$__cmd" ]; then 
		__cmd=$1;
	else
		__args="$__args $1";
	fi
}

__backtest()
{
	# $1 = strategy name 

	#define command (we always enable position stacking)
	local __cmd="freqtrade backtesting --config $__config --timerange $__timerange --strategy $1 --timeframe $__timeframe --timeframe-detail $__timeframe_detail --backtest-filename $__dir/$1.json $__args --userdir $__volume $__args";

	#store the command that lead to the result (this is essential to compare different tests)
	if [ "$__cmd_prefix" == "echo" ]
	then
		echo $__cmd '>' "$__dir/$1.cmd"
	else
		echo "$__cmd_prefix $__cmd" > "$__dir/$1.cmd"
	fi

	echo "Running $__cmd"

	#run command and store report (just because we can)
	if [ "$__cmd_prefix" == "echo" ]
	then
		echo $__cmd '>' "$__dir/$1.report"
	else
		$__cmd_prefix $__cmd > "$__dir/$1.report"
	fi
}

__backtest_all_strategies()
{
	#run 1 test per strategy
	for bas_file in user_data/strategies/*.py; do
		if [ -f "$bas_file" ]
		then
			local strategy=${bas_file%.py}
			local strategy=${strategy##*/}

			echo "Testing $strategy"
			__backtest $strategy
		fi
	done
}

__activate_python_env()
{
	#activate virtual environment
	echo "Activating python environment"
	$__cmd_prefix source $__env/bin/activate
	echo "Activated python environment"
}

__parse_args()
{
	[[ -z ${__parsed_args} ]] && __parsed_args=true || return 0;

	__cmd=;
	__cmd_prefix=;
	__dir=;
	__suffix=;
	__version=;
	__timerange=;
	__timeframe=;
	__epochs=;
	__loss=;
	__timeframe_detail='5m';
	__warning_timeframe_detail="WARNING - timeframe detail set to 5m"
	__strategy=;
	__config="$__volume/configs/bt/top10.json";
	__args=();

	while [[ $# -gt 0 ]]; do
		case $1 in
			--echo)
				__cmd_prefix=echo;
				shift
			;;

			--suffix)
				__suffix=$2;
				shift 2;
			;;
			--version)
				__version=$2;
				shift 2;
			;;
			--strategy)
				__strategy=$2
				shift 2;		
			;;
			--epochs)
				__epochs=$2
				shift 2;
			;;
			--hyperopt-loss)
				__loss=$2
				shift 2;
			;;

			--timeframe)
				__timeframe=$2;
				shift 2;
			;;
			--timeframe-detail)
				__timeframe_detail=$2;
				__warning_timeframe_detail;
				shift 2;
			;;

			--uptrend)
				__timerange="$uptrend"
				shift
			;;
			--downtrend)
				__timerange="$downtrend"
				shift
			;;
			--alltime)
				__timerange="$all_time"
				shift
			;;
			--mm2021)
				__timerange="$mm2021"
				shift
			;;
			--mm2020)
				__timerange="$mm2020"
				shift
			;;
			--basic)
				__config="$__volume/configs/bt/basic.json"
				shift
			;;
			--top10)
				__config="$__volume/configs/bt/top10.json"
				shift
			;;
			--correlation)
				__config="$__volume/configs/bt/correlation.json"
				shift
			;;
			*)
				__set $1;
				shift
			;;
		esac;
	done;
}




#run
__parse_args $@
$__cmd 
